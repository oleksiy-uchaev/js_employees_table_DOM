{"version":3,"sources":["scripts/main.js"],"names":["doc","orderASC","create","element","document","createElement","get","querySelector","getAll","querySelectorAll","getCell","row","evenT","children","target","cellIndex","textContent","replace","monetize","item","Intl","NumberFormat","format","capitalize","words","split","map","word","charAt","toUpperCase","slice","join","cities","tr","innerText","createInput","thisName","type","toLowerCase","insertAdjacentHTML","Set","city","addEventListener","e","preventDefault","newMap","FormData","userInput","age","name","post","newRow","validation","length","notify","addNewRecord","value","add","prepend","reset","posTop","notification","style","top","width","className","innerHTML","message","name_error","position_error","age_error","success","body","append","setTimeout","remove","sorted","sort","aRow","bRow","a","b","isNaN","localeCompare","reverse","classList","closest","input","replaced","textDecoration","appendChild","focus","saveOnBlur","keypress","key"],"mappings":"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","file":"main.48ff17e5.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst doc = {\n  orderASC: false,\n  create: (element) => document.createElement(element),\n  get: (element) => document.querySelector(element),\n  getAll: (element) => document.querySelectorAll(element),\n  getCell: (row, evenT) => row.children[evenT.target.cellIndex]\n    .textContent.replace(/[$,]/g, ''),\n\n  monetize: (item) => '$' + new Intl.NumberFormat('en-US').format(+item),\n  capitalize: (words) => words.split(' ')\n    .map(word => word[0].charAt(0).toUpperCase()\n    + word.slice(1)).join(' ').replace('_', ' '),\n\n  get cities() {\n    return [...this.getAll('tbody tr')].map(tr => tr.children[2].innerText);\n  },\n\n  createInput: (thisName, type) => `\n    <label>${thisName}:\n      <input\n        name=${thisName.toLowerCase()}\n        data-qa=${thisName.toLowerCase()}\n        type=${type}\n        autocomplete=\"off\"\n        required\n      />\n    </label>\n  `,\n};\n\ndoc.get('table').insertAdjacentHTML('afterEnd', `\n  <form class='new-employee-form'>\n    ${doc.createInput('Name', 'text')}\n    ${doc.createInput('Position', 'text')}\n      <label>Office:\n        <select name=\"Office\" data-qa='office'>\n          ${[...new Set(doc.cities)].map((city) => `\n            <option value=${city.replace(' ', '_')}>\n              ${city}\n            </option>\n          `, '')}\n        </select>\n      </label>\n    ${doc.createInput('Age', 'number')}\n    ${doc.createInput('Salary', 'number')}\n    <button type=\"Submit\">Save to table</button>\n  </form>`\n);\n\ndoc.get('form').addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const newMap = new FormData(doc.get('form'));\n  const userInput = {\n    age: newMap.get('age'),\n    name: newMap.get('name').replace(/\\s/g, ''),\n    post: newMap.get('position').replace(/\\s/g, ''),\n    newRow: doc.create('tr'),\n\n    validation: function() {\n      this.name.length < 4 && notify(100, 'name_error');\n      this.post.length < 4 && notify(198, 'position_error');\n      (this.age < 18 || this.age > 90) && notify(295, 'age_error');\n    },\n\n    addNewRecord: function() {\n      [...newMap].map(value => {\n        const add = ((value[0] === 'salary')\n          && doc.monetize(value[1])) || doc.capitalize(value[1]);\n\n        this.newRow.insertAdjacentHTML('beforeend', `<td>${add}</td>`);\n      });\n      doc.get('tbody').prepend(this.newRow);\n      notify(100, 'success');\n      doc.get('form').reset();\n    },\n  };\n\n  userInput.validation();\n  doc.get('.error') || userInput.addNewRecord();\n});\n\nconst notify = (posTop, type) => {\n  const notification = doc.create('div');\n  const message = {\n    name_error: 'Another letter required or two...',\n    position_error: 'This position has been filled!',\n    age_error: 'No way!<br/>...it is </b>illegal</b> to hire at this age!',\n    success: 'New Record ADDED!<br/><br/>Double click to eddit table',\n  };\n\n  notification.style.top = `${posTop}px`;\n  notification.style.width = `${190}px`;\n\n  notification.className = `\n    notification ${type.split('_')[1]} data-qa=\"notification`;\n\n  notification.innerHTML = `\n    <h2 class=\"title\">${type.split('_').join(' ')}</h2>\n    <p>${message[type]}</p>\n  `;\n  document.body.append(notification);\n\n  setTimeout(() => {\n    doc.get('.notification').remove();\n  }, 2000);\n};\n\ndoc.get('thead').addEventListener('click', (e) => {\n  const sorted = [...doc.getAll('tbody tr')].sort((aRow, bRow) => {\n    const a = doc.getCell(aRow, e);\n    const b = doc.getCell(bRow, e);\n\n    return isNaN(a) ? a.localeCompare(b) : a - b;\n  });\n\n  doc.orderASC && sorted.reverse();\n  doc.orderASC = !doc.orderASC;\n  sorted.map(tr => (doc.get('tbody').append(tr)));\n});\n\ndoc.get('tbody').addEventListener('click', (e) => {\n  [...doc.getAll('tbody tr')].map(tr => tr.classList.remove('active'));\n  e.target.closest('tr').classList.add('active');\n});\n\ndoc.get('tbody').addEventListener('dblclick', (e) => {\n  const input = doc.create('input');\n  const replaced = e.target.innerText;\n\n  input.value = replaced;\n  input.style.textDecoration = 'underline #FF3028';\n  input.classList.add('cell-input');\n\n  e.target.innerHTML = '';\n  e.target.appendChild(input);\n  input.focus();\n\n  const saveOnBlur = () => (input.value.length > 0\n    && (e.target.innerHTML = input.value))\n    || (e.target.innerHTML = replaced);\n\n  input.addEventListener('blur', saveOnBlur);\n\n  input.addEventListener('keypress', (keypress) => {\n    keypress.key === 'Enter' && saveOnBlur();\n  });\n});\n"]}